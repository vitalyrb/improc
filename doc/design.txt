В качестве основной проектной идеи был выбран подход использовать функторы для выполнения команд.
Один функтор - одна команда.
Функторы есть трёх типов:

лямбда функции - хорошо подходит для создания обработчиков небольших команд в несколько строк.
функтор объект — обычный класс у которого перегружен operator() - подходит для средних команд, 
агрегирующих дополнительные классы и ресурсы для выполнения своего функционала.
обычные функции - универсальный функтор. незаменим при экспорте из статической библиотеке.
подходит для созданий "тяжёлых" команд. (например библиотека инкапсулирующая работу с 
нейронной сетью или какие-то облачные вычисления.)

Конечно можно было бы использовать классический подход с созданием базового интерфейса ICommand
и создания разветвлённого дерева наследуемых от него классов команд, но идея с функторами более гибкая и расширяемая.

Все классы работают с хранилищем изображений через интерфейс IRepository, таким образом переписав всего лишь один класс можно 
реализовать облачное хранилище или хранение изображений в БД.

класс Application при старте инициализируется объектом потокового ввода std::istream. ПО умолчанию это стандартный поток ввода std::cin.
Но при желании вместо него может быть передан объект класса sts::stringstream в который предварительно может быть загружен файл 
с последовательностью команд.
Т.о. приложение очень просто можно добавить возможность выполнять командные скрипты.

Это основные архитектурные решения, есть и другие более мелкие. Готов ответить на любые вопросы.

