В качестве основной проектной идеи был выбран подход использовать функторы для выполнения команд.
Один функтор - одна команда.
Функторы есть трёх типов:

лямбда функции - хорошо подходят для создания обработчиков небольших команд в несколько строк.
функтор объект — обычный класс у которого перегружен operator() - подходит для команд среднего размера, 
агрегирующих дополнительные классы и ресурсы для выполнения своего функционала.
обычные функции - универсальный тип функтора. незаменим при экспорте из статической библиотеки.
подходит для созданий "тяжёлых" команд. (например команда-библиотека, инкапсулирующая работу с 
нейронной сетью или выполняющая какие-то облачные вычисления.)

Конечно можно было бы использовать классический подход с созданием базового интерфейса ICommand
и создания разветвлённого дерева, наследуемых от него классов команд, но идея с функторами более гибкая и расширяемая.

Все классы работают с хранилищем изображений через интерфейс IRepository, таким образом переписав всего лишь один класс можно другие способы хранения изображений, 
например облачное хранилище или хранение изображений в БД.

класс Application при старте инициализируется объектом потокового ввода std::istream. По умолчанию использется стандартный поток ввода std::cin.
Но при желании вместо него может быть передан объект класса stп::stringstream в который предварительно может быть загружен файл 
с последовательностью команд. Т.о. приложение очень просто можно добавить возможность выполнения командных скриптов.

Это основные архитектурные решения, есть и другие более мелкие. Готов ответить на любые вопросы.

